<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Sandstorm.io Blog</title>
		<description>Latest updates on Sandstorm.io</description>		
		<link>https://sandstorm.io</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Linux kernel CVE-2016-5195 &quot;Dirty COW&quot; mitigated by Sandstorm</title>
				<description>&lt;p&gt;Last week, a Linux kernel bug, &lt;a href=&quot;https://www.google.com/search?q=CVE-2016-5195&quot;&gt;CVE-2016-5195&lt;/a&gt;, was described as &lt;a href=&quot;http://arstechnica.com/security/2016/10/most-serious-linux-privilege-escalation-bug-ever-is-under-active-exploit/&quot;&gt;“the most serious Linux local privilege escalation ever”&lt;/a&gt;. The bug – which potentially allowed any code running on a Linux machine to escalate its privileges to root – was already being actively exploited in the wild before it was fixed, and had existed in the kernel for many years.&lt;/p&gt;

&lt;p&gt;Since Sandstorm allows any user of a server to upload their own apps, you might wonder if this bug could allow a Sandstorm user to compromise the server.&lt;/p&gt;

&lt;p&gt;We’re happy to report that the answer appears to be “no”. As is &lt;a href=&quot;https://docs.sandstorm.io/en/latest/using/security-non-events/#linux-kernel&quot;&gt;often the case&lt;/a&gt; with Linux kernel bugs, our sandbox blocked the exploit.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Of course, we still recommend updating your kernel in case the bug can be exploited in ways that have not been discovered yet.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;technical-details&quot;&gt;Technical Details&lt;/h3&gt;

&lt;p&gt;The bug in question was a race condition in the handling of memory pages mapped copy-on-write. A process can ask that a read-only file be mapped into its memory space in such a way that it is allowed to modify the mapped memory. When the process writes to the memory, the kernel makes a private copy of the affected page, so that the process only modifies its copy, not the original. Meanwhile, a process can request later on that the modifications it made be discarded, returning the page to its original state. In certain circumstances, by both writing to a page and requesting this discard at the same time (in separate threads), the process could end up writing to the original pages that are shared with other processes on the system, instead of its own private copy. Hence, the process could modify any file on the system. By modifying, say, the &lt;code&gt;sudo&lt;/code&gt; utility, it could give itself a backdoor which allows it to gain root privileges trivially.&lt;/p&gt;

&lt;p&gt;However, not just any old write worked here. In order to trigger the race condition, the process had to write in a way that calls the kernel’s &lt;code&gt;get_user_pages()&lt;/code&gt; function with the &lt;code&gt;force&lt;/code&gt; parameter set to &lt;code&gt;1&lt;/code&gt;. The &lt;code&gt;force&lt;/code&gt; parameter says: “If this page is mapped copy-on-write, then let me write to it (making a private copy) even if the page’s protection mode is read-only.” As it turns out, it is possible for a memory mapping to be both read-only and copy-on-write, and in fact this is the mode that is usually used when mapping in a program’s main binary and shared libraries. Normally, no copy is ever performed, because the writes that would trigger them are not allowed. However, there is a special case where this combination of flags matters: If you are running a program in a debugger, and you ask the debugger to insert a breakpoint, it does so by overwriting the instruction at the given address with a break instruction. That is, it modifies the mapped executable. The &lt;code&gt;force&lt;/code&gt; flag actually exists for exactly this purpose: so that the debugger can inject breakpoints into the program being executed by the process being debugged (without affecting any other processes that happen to be running the same program).&lt;/p&gt;

&lt;p&gt;Because the &lt;code&gt;force&lt;/code&gt; flag is only useful in very specific circumstances, only certain code paths can trigger the vulnerability. Kernel security engineer and Sandstorm contributor Andrew Lutomirski tells us the only entry points appear to be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;ptrace()&lt;/code&gt; system call’s &lt;code&gt;PTRACE_POKEDATA&lt;/code&gt; operation, which is explicitly meant to be used by debuggers, often for the purpose of setting breakpoints.&lt;/li&gt;
  &lt;li&gt;Writes to &lt;code&gt;/proc/&amp;lt;pid&amp;gt;/mem&lt;/code&gt;. It’s unclear why this code uses &lt;code&gt;force&lt;/code&gt; – possibly it was a mistake.&lt;/li&gt;
  &lt;li&gt;Various drivers, which are also probably using the flag by mistake.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As it turns out, none of these code paths can be exploited by Sandstorm apps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sandstorm uses seccomp to block the app from invoking &lt;code&gt;ptrace()&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Sandstorm does not mount &lt;code&gt;/proc&lt;/code&gt; inside app sandboxes.&lt;/li&gt;
  &lt;li&gt;Sandstorm does not expose driver interfaces from inside app sandboxes. For example, &lt;code&gt;/dev&lt;/code&gt; contains only &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;zero&lt;/code&gt;, and &lt;code&gt;urandom&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, as far as we can tell, Sandstorm has never been vulnerable to this bug.&lt;/p&gt;

&lt;h3 id=&quot;defense-in-depth&quot;&gt;Defense in depth&lt;/h3&gt;

&lt;p&gt;Even if Sandstorm were vulnerable, the exploit would have far reduced impact inside Sandstorm than in a typical Linux environment, because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Within a Sandstorm app’s sandbox, the visible filesystem consists of the contents of its own package. It cannot see the host system’s files nor files belonging to other apps, hence it would not be able to memory-map them in order to modify them using this bug.&lt;/li&gt;
  &lt;li&gt;App packages cannot contain setuid binaries and, even if they could, apps would not be able to execute them, because Sandstorm sets the &lt;code&gt;NO_NEW_PRIVS&lt;/code&gt; &lt;code&gt;prctl()&lt;/code&gt; flag inside the sandbox.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When running on Sandstorm, a user’s data in an app like Etherpad is containerized separately from another user’s data. In fact, we go one step further and &lt;a href=&quot;https://sandstorm.io/how-it-works#grains&quot;&gt;containerize each document separately&lt;/a&gt;. In the case that Sandstorm had not mitigated the bug outright, it appears the impact of the bug would be that an app could break Sandstorm’s per-document isolation and read/write documents from any number of users, so long as those users all use the same version of the same app on the same server. The app still would not have been able to interfere with other apps. This is the status quo in a typical Linux environment: in most non-Sandstorm environments, an app keeps all users’ data in a single database without per-user isolation. Overall, this is much less significant than a privilege escalation to root. Thankfully, our seccomp mitigation prevented this.&lt;/p&gt;

&lt;h3 id=&quot;sandstorms-security-record&quot;&gt;Sandstorm’s Security Record&lt;/h3&gt;

&lt;p&gt;This is not the first Linux security bug mitigated by Sandstorm. In fact, we’ve kept a long list. Moreover, in addition to mitigating Linux kernel problem, Sandstorm mitigates most vulnerabilities in the apps that run on top of it. Check out the whole list of mitigated vulnerabilities that we’ve compiled: &lt;a href=&quot;https://docs.sandstorm.io/en/latest/using/security-non-events/&quot;&gt;Sandstorm Security Non-Events&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to try out Sandstorm as a user? &lt;a href=&quot;https://demo.sandstorm.io&quot;&gt;Try the online demo »&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Tue, 25 Oct 2016 00:00:00 -0700</pubDate>
                                <link>https://sandstorm.io/news/2016-10-25-cve-2016-5195-dirtycow-mitigated</link>
                                <guid isPermaLink="true">https://sandstorm.io/news/2016-10-25-cve-2016-5195-dirtycow-mitigated</guid>
			</item>
		
			<item>
				<title>Sharing documents with a Rocket.Chat room in Sandstorm</title>
				<description>&lt;p&gt;I’m sharing a pro-tip today because I like making sure that everyone gets the most productivity they can out of Sandstorm.&lt;/p&gt;

&lt;p&gt;Let’s say I want to share a grain (e.g., a document, spreadsheet, git repository, or a &lt;a href=&quot;https://sandstorm.io/news/2016-08-09-collections-app&quot;&gt;Collection&lt;/a&gt;) with a group of colleagues who are already in the same &lt;a href=&quot;https://apps.sandstorm.io/app/vfnwptfn02ty21w715snyyczw0nqxkv3jvawcah10c6z7hj1hnu0&quot;&gt;Rocket.Chat&lt;/a&gt; chatroom. To do so, I first click the + icon in Rocket.Chat.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/news/images/rc_button.png&quot; alt=&quot;Click on the + button in Rocket Chat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This opens a &lt;a href=&quot;https://sandstorm.io/how-it-works#powerbox&quot;&gt;Powerbox&lt;/a&gt; request with a type-ahead search box. Before I’ve typed anything, I can see the grains that have most recently been opened by me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/news/images/rc2.png&quot; alt=&quot;Powerbox list of grains (ordered by most recently opened)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For instance, if I’m looking for feedback for a blog post I drafted in &lt;a href=&quot;https://apps.sandstorm.io/app/h37dm17aa89yrd8zuqpdn36p6zntumtv08fjpu8a8zrte7q1cn60&quot;&gt;Etherpad&lt;/a&gt;, I can type “Etherpad” and it will list all Etherpads that I have access to on this server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/news/images/rc3.png&quot; alt=&quot;Search by grain type&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here are all the Etherpads I have access to. But today, I’m actually searching for something else: a Collection titled “Sales / Revenue docs”. I can also search for grains by title, so I search for “revenue”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/news/images/rc4.png&quot; alt=&quot;Search by grain type or title&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once I’ve selected the grain, I can choose whether I’d like to give everyone in this chatroom the permission to edit or only view this Collection before I connect the grain with this Rocket.Chat room.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/news/images/rc5.png&quot; alt=&quot;grant permission&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When I share a grain in a chatroom, it automatically renders a snippet which includes the icon for the app that opens the grain. It looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/news/images/rc6_shared.png&quot; alt=&quot;snippet&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, everyone who is in this chatroom has access to this Collection (as well as every grain inside it). No need to go share it with them separately.&lt;/p&gt;

&lt;p&gt;To try it out for yourself, go install &lt;a href=&quot;https://apps.sandstorm.io/app/vfnwptfn02ty21w715snyyczw0nqxkv3jvawcah10c6z7hj1hnu0&quot;&gt;Rocket.Chat&lt;/a&gt; now!&lt;/p&gt;

&lt;p&gt;Do you use Sandstorm to collaborate at work? &lt;a href=&quot;https://sandstorm.io/business&quot;&gt;Sandstorm for Work&lt;/a&gt; (&lt;a href=&quot;https://sandstorm.io/get-feature-key&quot;&gt;60-day free trial&lt;/a&gt;) comes with priority support, organization management features, and integration with enterprise infrastructure.&lt;/p&gt;

&lt;p&gt;By the way, if you found this useful and would like to see more bite-sized pro-tip style blog posts in the future, please reshare this and let me know (I’m &lt;a href=&quot;https://twitter.com/qiqing&quot;&gt;@qiqing&lt;/a&gt; on Twitter)!&lt;/p&gt;
</description>
				<pubDate>Thu, 13 Oct 2016 00:00:00 -0700</pubDate>
                                <link>https://sandstorm.io/news/2016-10-13-sharing-documents-rocketchat</link>
                                <guid isPermaLink="true">https://sandstorm.io/news/2016-10-13-sharing-documents-rocketchat</guid>
			</item>
		
			<item>
				<title>The Mysterious Fiber Bomb Problem: A Debugging Story</title>
				<description>&lt;p&gt;A month or two ago, we started seeing a mysterious problem in production: every now and then, one of our Node.js web server processes supporting Sandstorm Oasis would suddenly jump to 100% CPU usage (of one core) and stay there until it was killed. The problem wasn’t an infinite loop, though: the process continued to respond to requests, just slowly. Since the process continued to respond to requests, it continued to pass health checks and was never restarted automatically. But for users assigned to that shard, the service was essentially unusable, as every action would take seconds to complete. The problem left nothing at all suspicious in the logs – other than a gap in which far fewer requests that normal were being handled. At first, the problem only struck about once a week, seemingly at random.&lt;/p&gt;

&lt;p&gt;This kind of bug is a web developer’s worst nightmare. How do you debug something which you can only reproduce once a week, at random, with real users on the line? What could even cause a process to slow down but not stop in this way?&lt;/p&gt;

&lt;h3 id=&quot;whats-eating-our-cpu&quot;&gt;What’s eating our CPU?&lt;/h3&gt;

&lt;p&gt;Obviously, we needed to take a CPU profile while the bug was in progress. Of course, the bug only reproduced in production, therefore we’d have to take our profile in production. This ruled out any profiling technology that would harm performance at other times – so, no instrumented binaries. We’d need a sampling profiler that could run on an existing process on-demand. And it would have to understand both C++ and V8 Javascript. (This last requirement ruled out my personal favorite profiler, pprof from google-perftools.)&lt;/p&gt;

&lt;p&gt;Luckily, it turns out there is a correct modern answer: Linux’s “perf” tool. This is a sampling profiler that relies on Linux kernel APIs, thus not requiring loading any code into the target binary at all, at least for C/C++. And for Javascript, it turns out V8 has built-in support for generating a “perf map”, which tells the tool how to map JITed code locations back to Javascript source: just pass the &lt;code&gt;--perf_basic_prof_only_functions&lt;/code&gt; flag on the Node command-line. This flag is safe in production – it writes some data to disk over time, but we rebuild all our VMs weekly, so the files never get large enough to be a problem.&lt;/p&gt;

&lt;p&gt;Armed with this new knowledge, we waited. Finally, after a few days, my pager went off. I shelled into the broken server, recorded a ten-second profile, restarted Node, and then downloaded the data for analysis. Upon running &lt;code&gt;perf&lt;/code&gt;, I was presented with this:&lt;/p&gt;

&lt;p style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;/news/images/fiber-bomb-perf1-full.png&quot;&gt;&lt;img alt=&quot;Screenshot of Linux-perf showing two C++ functions taking excessive CPU time.&quot; src=&quot;/news/images/fiber-bomb-perf1.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, this looks promising! Almost all the time is being spent in two C++ functions! The perf viewer makes it easy to jump directly into the disassembly:&lt;/p&gt;

&lt;p style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;/news/images/fiber-bomb-perf2-full.png&quot;&gt;&lt;img alt=&quot;Screenshot of Linux-perf showing two C++ functions taking excessive CPU time.&quot; src=&quot;/news/images/fiber-bomb-perf2.png&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;/news/images/fiber-bomb-perf3-full.png&quot;&gt;&lt;img alt=&quot;Screenshot of Linux-perf showing two C++ functions taking excessive CPU time.&quot; src=&quot;/news/images/fiber-bomb-perf3.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wow! Almost all of our CPU time is being spent on a handful of instructions. In fact, what we’re looking at here is two different inlined copies of the same C++ code:&lt;/p&gt;

&lt;p style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/v8/v8/blob/c176b26fee9dcfe9379a6e01b677298252a1602e/src/isolate.cc#L1861&quot;&gt;&lt;img src=&quot;/news/images/fiber-bomb-code.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What you are looking at is a loop that traverses a linked list trying to find the element with a particular ID. We were spending the majority of our CPU time scanning one linked list.&lt;/p&gt;

&lt;h3 id=&quot;v8-threads-dont-scale&quot;&gt;V8 “threads” don’t scale&lt;/h3&gt;

&lt;p&gt;So, what is this code for?&lt;/p&gt;

&lt;p&gt;You might be surprised to see the word “thread” in V8, which implements Javascript, a language known for being almost militantly opposed to threads. It turns out, though, that V8 supports “green threads” – simulated threads implemented entirely in userspace, with cooperative switching. Node users can take advantage of this via the &lt;a href=&quot;https://github.com/laverdet/node-fibers&quot;&gt;node-fibers npm package&lt;/a&gt;. This package allows you to avoid Node’s “callback hell” by instead instantiating arbitrarily many call stacks and jumping between them whenever you need to wait for an asynchronous operation. Our code was, in fact, using node-fibers, mostly because we built on &lt;a href=&quot;https://meteor.com&quot;&gt;Meteor&lt;/a&gt;, which uses fibers by default.&lt;/p&gt;

&lt;p&gt;The linked list in question implements a map from thread IDs to per-thread data, such as thread-local variables. Among other things, every time the process switches between fibers, the current thread is looked up in this table.&lt;/p&gt;

&lt;p&gt;As any fresh CS grad knows, a linked list is not the ideal data structure for a lookup table – you probably want a hashtable, red-black tree, or the like. But as many more experienced engineers know, a linked list can be more efficient than those other structures in cases where the number of elements stays small. V8’s developers, as it turns out, had designed around the assumption of a fixed thread pool never containing more than a handful of threads. But node-fibers – especially as used by Meteor – doesn’t work this way. In Meteor, every concurrent operation gets its own fiber. Once a fiber completes, it is placed in a pool for reuse, but if many fibers are needed simultaneously, the pool can grow to any size. As the pool gets bigger, the linked list gets bigger, which makes fiber-switching slower, which makes the whole process permanently slower.&lt;/p&gt;

&lt;h3 id=&quot;but-whats-creating-them&quot;&gt;But what’s creating them?&lt;/h3&gt;

&lt;p&gt;But our processes weren’t getting slower over time. They were getting suddenly slower all at once. One moment the process is fine, the next it is hosed. Under normal load, our servers were sitting steady at around 100 fibers – nowhere near enough to be a problem. So now we had a new mystery: What was causing these sudden spikes in fiber creation? It was around this time we started referring to the incidents as “fiber bombs”. Alas, our profiles only showed us the after-effects of a bomb having gone off; they told us nothing about how the fibers were created in the first place. So we were back to square one.&lt;/p&gt;

&lt;p&gt;Early on the morning of September 1st, the problem became suddenly more urgent: Instead of once a week, the problem started happening approximately once an hour. Like any good production problem, this began just after midnight. After three or so iterations of “get paged, wake up, restart the process, go back to sleep”, I grudgingly accepted that this could not wait until the morning. By about 5AM I had hot-patched our servers to monitor their own fiber counts and kill themselves whenever the number went over 1000 or so. In the process, I observed that a typical “fiber bomb” created anywhere from 5,000 to 20,000 fibers – all at once.&lt;/p&gt;

&lt;p&gt;Still, the root cause was a mystery. With the servers now managing their own restarts and the pager quieting down, I crawled back into bed.&lt;/p&gt;

&lt;p&gt;The spikes continued to happen approximately once an hour from then on. This was actually wonderful: it meant I could now iterate on the problem 150x faster than I could before! I began manually instrumenting the codebase with a sort of poor-man’s sampling profiler that specifically sampled fiber creation, and specifically did so at times when fiber counts seemed to be spiking. This turned out not as easy as it sounds, as there were many places that would create fibers as a result of some task having been queued previously. At the time of fiber creation, the queue insertion was no longer on the stack. So, I had to instrument the queue inserts too, and so on.&lt;/p&gt;

&lt;h3 id=&quot;a-bad-monkey-patch&quot;&gt;A bad monkey-patch&lt;/h3&gt;

&lt;p&gt;Soon, I made a startling discovery: It turned out that Meteor had monkey-patched the global Promise implementation. Specifically, they had apparently decided that they wanted &lt;code&gt;.then()&lt;/code&gt; callbacks always to run in fibers, for convenience since most Meteor code requires that it be run in a fiber. Thus, they wrote code to intercept calls to &lt;code&gt;.then()&lt;/code&gt; and wrap the callback in another callback that creates a new fiber and runs the original callback inside it.&lt;/p&gt;

&lt;p&gt;This might sound basically reasonable at first (it should be “compatible” with standard Promise semantics), but there is a problem: In code that makes heavy, idiomatic use of Promises, it is common to string together a long chain of short &lt;code&gt;.then()&lt;/code&gt; callbacks. As it so happens, Sandstorm itself contains a lot of Promise-based code, especially around communicating with its back-end, which it does using &lt;a href=&quot;https://capnproto.org&quot;&gt;Cap’n Proto&lt;/a&gt;. Cap’n Proto’s API makes very heavy use of Promises, and does &lt;em&gt;not&lt;/em&gt; expect to run in fibers. Thus, this code which seemingly had nothing to do with fibers was in fact the main creator of fibers in our system, creating massive quantities of totally unnecessary fibers, wasting memory and CPU time.&lt;/p&gt;

&lt;p&gt;But even that didn’t actually explain the bombs. The way fibers work, if you start a new fiber that immediately completes, the fiber immediately goes back to the fiber pool. All of our Promise-heavy code operated in asynchronous style, therefore the callbacks would always complete immediately. So while the Promise code was needlessly starting lots of fibers, it should actually have been reusing the same Fiber object over and over again.&lt;/p&gt;

&lt;p&gt;But there was one more wrinkle: It turns out that the V8 promise implementation itself sometimes calls &lt;code&gt;.then()&lt;/code&gt; recursively, passing along one callback from one promise to another. In fact, it has to do this to correctly implement the spec. But since &lt;code&gt;.then()&lt;/code&gt; had been monkey-patched, each time the same callback passed through another &lt;code&gt;.then()&lt;/code&gt; call, it received another wrapper layer spawning another fiber. In the end, one callback, when finally called, would start a fiber, which would start another fiber, which would start another fiber, and so on. Since each fiber in this chain was itself responsible for spawning the next, all the fibers would be started before any completed. If one callback managed to be wrapped 20,000 times, then you get 20,000 fibers, all at once.&lt;/p&gt;

&lt;p&gt;I &lt;a href=&quot;https://github.com/meteor/promise/pull/11&quot;&gt;patched&lt;/a&gt; the Promise monkey-patch such that, after wrapping a callback, it would mark the wrapped callback object with a field like &lt;code&gt;alreadyWrapped = true&lt;/code&gt;. If the same callback came back to be wrapped again, the code would see this marking and avoid double-wrapping.&lt;/p&gt;

&lt;p&gt;And just like that, the problem stopped.&lt;/p&gt;

&lt;p&gt;Meanwhile, we’ve also &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=5338&quot;&gt;filed an issue against V8&lt;/a&gt;, requesting that they replace their linked list with a hashtable. This wouldn’t have completely mitigated the fiber bombs, but it would have at least prevented them from permanently crippling the process.&lt;/p&gt;
</description>
				<pubDate>Fri, 30 Sep 2016 00:00:00 -0700</pubDate>
                                <link>https://sandstorm.io/news/2016-09-30-fiber-bomb-debugging-story</link>
                                <guid isPermaLink="true">https://sandstorm.io/news/2016-09-30-fiber-bomb-debugging-story</guid>
			</item>
		
			<item>
				<title>August changelog: what&#39;s new in Sandstorm</title>
				<description>&lt;p&gt;August’s most visible change is that when new users join a Sandstorm server, some apps are installed
automatically. By default, and on
&lt;a href=&quot;https://oasis.sandstorm.io/&quot;&gt;Oasis,&lt;/a&gt; users can jump into Davros, Etherpad, Rocket.Chat, and Wekan,
and they can create collections using the &lt;a href=&quot;https://sandstorm.io/news/2016-08-09-collections-app&quot;&gt;Collections
app&lt;/a&gt;. The server administrator can choose
which apps come preinstalled for their users. We hope this helps people quickly become productive
with Sandstorm!&lt;/p&gt;

&lt;p&gt;We made some underlying technical changes this month, too. The most significant is that we migrated
to &lt;a href=&quot;http://info.meteor.com/blog/announcing-meteor-1.4&quot;&gt;Meteor 1.4&lt;/a&gt;, which allowed us to switch to
the most recent long-term supported version of nodejs, &lt;a href=&quot;https://nodejs.org/en/blog/release/v4.0.0/&quot;&gt;node
4.&lt;/a&gt; This required some substantial upheaval behind the
scenes. It also enabled a change we’ve wanted to make for a long time: users of our
&lt;a href=&quot;https://docs.sandstorm.io/en/latest/administering/sandcats/&quot;&gt;sandcats.io&lt;/a&gt; free HTTPS service now
use ciphers supporting &lt;a href=&quot;http://stackoverflow.com/questions/14034508/dh-vs-dhe-and-ecdhe-and-perfect-forward-secrecy&quot;&gt;perfect forward
secrecy.&lt;/a&gt;
If you test your own sandcats-enabled server on the &lt;a href=&quot;https://www.ssllabs.com/ssltest/&quot;&gt;Qualys SSL Labs server
test&lt;/a&gt;, you’ll see that your grade has improved from an A- to an A!&lt;/p&gt;

&lt;p&gt;Sandstorm servers have automatic updates enabled by default, so to get these updates, you don’t
have to do anything. Sandstorm checks for updates and smoothly switches to the latest code every
24 hours.&lt;/p&gt;

&lt;p&gt;Here’s the full August changelog!&lt;/p&gt;

&lt;h3 id=&quot;v0179-2016-08-26&quot;&gt;v0.179 (2016-08-26)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A user can now request deletion of their own account, unless they are a member of a Sandstorm for Work organization. Deletion has a 7-day cooldown during whith the user can change their mind.&lt;/li&gt;
  &lt;li&gt;Admins can now suspend and delete accounts from the admin panel.&lt;/li&gt;
  &lt;li&gt;Apps can now request that an offer template be a link with a special protocol scheme that can trigger a mobile intent, allowing one-click setup of mobile apps. Apps will need to be updated to take advantage of this.&lt;/li&gt;
  &lt;li&gt;Identity capabilities now have a getProfile() method, allowing a grain to discover when a user’s profile information has changed without requiring the user to return to the grain.&lt;/li&gt;
  &lt;li&gt;Fixed that admins were unable to un-configure SMTP after it had been configured.&lt;/li&gt;
  &lt;li&gt;Fixed problems in sandstorm-http-bridge that could make notifications unreliable. Affected apps will need to rebuild.&lt;/li&gt;
  &lt;li&gt;Increased expiration time for uploading a backup from 15 minutes to 2 hours, to accommodate large backup files on slow connections.&lt;/li&gt;
  &lt;li&gt;Fixed email attachments from apps having incorrect filenames.&lt;/li&gt;
  &lt;li&gt;Fixed various styling issues.&lt;/li&gt;
  &lt;li&gt;Various ongoing refactoring.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;v0178-2016-08-20&quot;&gt;v0.178 (2016-08-20)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The grain list can now be sorted by clicking on the column headers.&lt;/li&gt;
  &lt;li&gt;Many improvements to mobile UI. (Still more to do.)&lt;/li&gt;
  &lt;li&gt;Your current identity’s profile picture now appears next to your name in the upper-right.&lt;/li&gt;
  &lt;li&gt;Fixed desktop notifications displaying grain titles incorrectly.&lt;/li&gt;
  &lt;li&gt;Fixed &lt;code&gt;spk publish&lt;/code&gt; throwing an exception due to a bug in email handling.&lt;/li&gt;
  &lt;li&gt;Improved accessibility of “Sandstorm has been updated - click to reload” bar.&lt;/li&gt;
  &lt;li&gt;When an app returns an invalid &lt;code&gt;ETag&lt;/code&gt; header, sandstorm-http-bridge will now log an error and drop it rather than throw an exception.&lt;/li&gt;
  &lt;li&gt;Updated to Meteor 1.4.1.&lt;/li&gt;
  &lt;li&gt;Oasis: Fixed appdemo not working for Davros.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;v0177-2016-08-15-bugfixes&quot;&gt;v0.177 (2016-08-15) [bugfixes]&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Changes to SMTP handling in v0.175 caused Sandstorm to begin verifying TLS certificates strictly. Unfortunately, the prevailing norm in SMTP is loose enforcement and many actual users found Sandstorm no longer worked with their SMTP providers. This update therefore relaxes the rules again, but in the near future we will add configuration options to control this.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;v0176-2016-08-13-bugfixes&quot;&gt;v0.176 (2016-08-13) [bugfixes]&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Fix web publishing to alternate hosts, broken by an API change in Node.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;v0175-2016-08-13&quot;&gt;v0.175 (2016-08-13)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Grain sizes now appear on the grain list.&lt;/li&gt;
  &lt;li&gt;Added &lt;code&gt;sandstorm uninstall&lt;/code&gt; shell command.&lt;/li&gt;
  &lt;li&gt;Upgraded to Meteor 1.4 and Node 4.&lt;/li&gt;
  &lt;li&gt;Sandcats: HTTPS connections now support ECDHE forward secrecy (as a result of the Node upgrade). Qualys grade increased from A- to A.&lt;/li&gt;
  &lt;li&gt;Bell-menu notifications now also trigger desktop notifications.&lt;/li&gt;
  &lt;li&gt;The collections app has been added to the default preinstall list for new servers. (We highly recommend existing servers add it in the admin settings, too.)&lt;/li&gt;
  &lt;li&gt;No apps will be automatically installed on dev/testing servers (e.g. vagrant-spk).&lt;/li&gt;
  &lt;li&gt;Switched to newer, better mail-handling libraries.&lt;/li&gt;
  &lt;li&gt;Fixed the “close” button on the email self-test dialog.&lt;/li&gt;
  &lt;li&gt;Fixed the “dismiss” button on notifications behaving like you’d clicked the notification body.&lt;/li&gt;
  &lt;li&gt;Errors during a powerbox request will now be shown on-screen rather than just printed to the console.&lt;/li&gt;
  &lt;li&gt;Fixed that uploading a backup left a bogus history entry, breaking the browser’s back button.&lt;/li&gt;
  &lt;li&gt;Fixed powerbox search box, which was apparently completely broken.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;v0174-2016-08-05&quot;&gt;v0.174 (2016-08-05)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Admins can now choose to pre-install certain apps into new user accounts. For all new servers and Oasis, our four most-popular apps will be pre-installed by default: Etherpad, Wekan, Rocket.Chat, and Davros. Admins can disable this if they prefer, and servers predating this change will not pre-install any apps by default (but the admin can change this).&lt;/li&gt;
  &lt;li&gt;offer()ing a grain capability now works for anonymous users, which means anonymous users can use the collections app. This app will be officially released shortly.&lt;/li&gt;
  &lt;li&gt;Identicons are now rendered as SVGs rather than PNGs, which makes them much more efficient to generate. This in particular fixes the noticeable pause when the sharing contact auto-complete first appears for users who have many contacts.&lt;/li&gt;
  &lt;li&gt;Updated to Meteor 1.3.5.1 (1.4 / Node 4 coming soon!).&lt;/li&gt;
  &lt;li&gt;Fixed that Sandstorm sometimes temporarily incorrectly flashed “(incognito)” in place of the user name when starting.&lt;/li&gt;
  &lt;li&gt;Sandstorm for Work: Non-square whitelabel icons now do something reasonable.&lt;/li&gt;
  &lt;li&gt;Various refactoring.&lt;/li&gt;
  &lt;li&gt;Somewhat improved styling of bell-menu notifications. (More work to be done.)&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Tue, 13 Sep 2016 00:00:00 -0700</pubDate>
                                <link>https://sandstorm.io/news/2016-09-13-whats-new</link>
                                <guid isPermaLink="true">https://sandstorm.io/news/2016-09-13-whats-new</guid>
			</item>
		
			<item>
				<title>Sandstorm for Work is Ready</title>
				<description>&lt;p&gt;Today, we’re announcing that Sandstorm for Work is no longer in beta. Companies large and small – ourselves included – have been getting work done using Sandstorm for months. It’s time for you to join us!&lt;/p&gt;

&lt;h3 id=&quot;what-is-sandstorm-for-work&quot;&gt;What is Sandstorm for Work?&lt;/h3&gt;

&lt;p&gt;&lt;img style=&quot;float: right; width: 283px; height: 221px;&quot; src=&quot;/images/business-ldap.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Do you wish you could use web services like Google Apps, Slack, Trello, Dropbox, and others, but can’t for security, privacy, or compliance reasons? Frustrated by the setup and maintenance costs of most self-hosted solutions? Need to integrate with your corporate single-sign-on (LDAP, SAML, Active Directory) and enforce company-wide access control policies?&lt;/p&gt;

&lt;p&gt;Sandstorm is a suite of web-based productivity software which you can deploy on your own servers with minimal effort. Any user can install the apps they need with a few clicks – like installing apps on your phone. Apps run inside secure sandboxes with single-sign-on and uniform fine-grained access control. And everything stays up-to-date automatically, so you can set it and forget it.&lt;/p&gt;

&lt;p&gt;Sandstorm for Work is Sandstorm plus the ability to integrate with your corporate single-sign-on, priority support, and other features businesses need.&lt;/p&gt;

&lt;h3 id=&quot;pricing&quot;&gt;Pricing&lt;/h3&gt;

&lt;p&gt;During the beta period we listened to your feedback on pricing, and we’ve decided to make some changes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We’ve set a new list price of $10/user/month.&lt;/li&gt;
  &lt;li&gt;For a limited time, we are offering an additional &lt;strong&gt;50% off&lt;/strong&gt; if you choose annual billing.&lt;/li&gt;
  &lt;li&gt;Free trials now last 60 days.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a class=&quot;linkbutton&quot; href=&quot;https://sandstorm.io/get-feature-key&quot;&gt;Get Sandstorm for Work »&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;discounted-and-free-keys&quot;&gt;Discounted and free keys&lt;/h3&gt;

&lt;p&gt;We only think you should be paying for Sandstorm if it is helping you make money. To that end:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Non-profits&lt;/strong&gt; with paid employees can receive Sandstorm for Work at half price: $5/user/month.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Educational institutions&lt;/strong&gt; supporting faculty and students pay $5/month for each faculty member and $1/month for each student.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Volunteer groups&lt;/strong&gt; can receive Sandstorm for Work completely free.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Home users&lt;/strong&gt; can also receive Sandstorm for Work for free; if you run an LDAP or SAML server for your own family, then we want your Sandstorm server to be able to take advantage of it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bulk discounts&lt;/strong&gt; are available for large organizations and resellers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If any of these situations describe you, &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#115;&amp;#097;&amp;#108;&amp;#101;&amp;#115;&amp;#064;&amp;#115;&amp;#097;&amp;#110;&amp;#100;&amp;#115;&amp;#116;&amp;#111;&amp;#114;&amp;#109;&amp;#046;&amp;#105;&amp;#111;&quot;&gt;tell us about it&lt;/a&gt; and we’ll set you up.&lt;/p&gt;

&lt;h3 id=&quot;core-productivity-suite&quot;&gt;Core productivity suite&lt;/h3&gt;

&lt;p&gt;Sandstorm now bundles our four most-popular apps. Every user can immediately edit documents with Etherpad, create task boards with Wekan, create a chat room with Rocket.Chat, and synchronize &amp;amp; secure their files with Davros.&lt;/p&gt;

&lt;p&gt;On Sandstorm, these apps can integrate in ways that aren’t possible when they run stand-alone. For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Activity, comments, and mentions are merged into a single notification stream, so it’s easy to keep track of what your teammates are working on across all apps at once.&lt;/li&gt;
  &lt;li&gt;You can gather related data from across apps into collections to be shared as a unit.&lt;/li&gt;
  &lt;li&gt;You can share data from any app directly and securely to a chat room in Rocket.Chat – click the button just to the left of the chat box. No need to generate nor copy/paste a secret link – and no need to worry about that link falling into the wrong hands.&lt;/li&gt;
  &lt;li&gt;Sandstorm for Work’s priority support covers these apps in addition to Sandstorm itself. If you have a problem, just let us know and we’ll work with the upstream developers to get it fixed on your behalf.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;extended-app-library&quot;&gt;Extended app library&lt;/h3&gt;

&lt;p&gt;There are currently &lt;a href=&quot;https://apps.sandstorm.io&quot;&gt;61 apps and growing&lt;/a&gt; available on Sandstorm, and you can easily &lt;a href=&quot;https://docs.sandstorm.io/en/latest/developing/&quot;&gt;make your own&lt;/a&gt;. Need to run surveys, create spreadsheets, make diagrams, take notes, typeset scholarly papers, host code, publish web pages, or run wikis? We have all that, and more.&lt;/p&gt;

&lt;h3 id=&quot;unprecedented-security&quot;&gt;Unprecedented security&lt;/h3&gt;

&lt;p&gt;Sandstorm is the only server platform that uses fine-grained containerization, which &lt;a href=&quot;https://docs.sandstorm.io/en/latest/using/security-non-events/&quot;&gt;protects you against security bugs in apps&lt;/a&gt;, so you can safely let your users install the apps they need, relying on Sandstorm’s automatic exploit mitigation and network isolation to keep data safe.&lt;/p&gt;

&lt;h3 id=&quot;automatic-updates&quot;&gt;Automatic updates&lt;/h3&gt;

&lt;p&gt;As always, once you’ve installed Sandstorm for Work, Sandstorm and apps will be kept up-to-date automatically, with no action needed on your part. Sandstorm is getting better every day, and your users will get those benefits without you lifting a finger.&lt;/p&gt;

&lt;h3 id=&quot;still-open-source&quot;&gt;Still open source&lt;/h3&gt;

&lt;p&gt;Sandstorm for Work is 100% open source software with a thriving community. That means it will never disappear or stop working. Read more in &lt;a href=&quot;https://sandstorm.io/news/2016-04-06-sandstorm-for-work&quot;&gt;our original announcement&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;linkbutton&quot; href=&quot;https://sandstorm.io/get-feature-key&quot;&gt;Get Sandstorm for Work »&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Wed, 31 Aug 2016 00:00:00 -0700</pubDate>
                                <link>https://sandstorm.io/news/2016-08-31-sandstorm-for-work-ready</link>
                                <guid isPermaLink="true">https://sandstorm.io/news/2016-08-31-sandstorm-for-work-ready</guid>
			</item>
		
			<item>
				<title>Decentralization is about diversity</title>
				<description>&lt;p&gt;&lt;img src=&quot;/news/images/decentralize.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lately, there has been a flurry of activity around decentralizing the web. Summits have been held. New projects – and companies – have been started. Having worked on this issue for several years now, we’re excited to see it becoming increasingly mainstream.&lt;/p&gt;

&lt;p&gt;But what, exactly, are we trying to solve? Most people think it has something to do with privacy, and maybe also security. Some argue that data ownership and mobility are the most important things. Sometimes this leads decentralization projects to focus on data storage while neglecting compute. Some projects even propose that so long as storage is decentralized, it doesn’t matter where the software actually runs.&lt;/p&gt;

&lt;p&gt;Privacy, security, ownership, and mobility are all important, but I feel there is a much more important goal that is often poorly understood:&lt;/p&gt;

&lt;p style=&quot;font-weight: bold; text-align: center; font-size: 130%; margin: 1em auto; width: 500px; max-width: 90%;&quot;&gt;The most important reason to decentralize is software&amp;mdash;and developer&amp;mdash;diversity.&lt;/p&gt;

&lt;p&gt;By “diversity”, I mean this: Who can develop software that other people can plausibly use? Is it primarily mega-corps like Apple and Google? VC-backed startups? Or can one random person, working in their spare time, build just the right app and reach millions of people? Can a community of unfunded volunteers build an open source app that wins because it is the best? Can an employee of one company, having built a useful internal app to solve a problem they had, give (or sell) that app to another company in the same position, without a lot of hassle? Can a teenage fan of a particular video game build an app that assists players of the game, and then share that app with the rest of the game’s community?&lt;/p&gt;

&lt;p&gt;All of the above happens regularly with mobile and desktop apps, but it is far more difficult on the web.&lt;/p&gt;

&lt;p&gt;We live in a time when our tools are so good that a single competent application developer working weekends can create almost any web application you can imagine. However, rarely can that single developer also run a secure, scalable service and a business around it. As a result, when software is delivered as a service, the only software that is available is that which was deemed &lt;em&gt;a priori&lt;/em&gt; to be sufficiently lucrative to interest a mega-corp like Google or a VC-backed startup. &lt;strong&gt;Therefore, the only software services we get come courtesy of these gatekeepers.&lt;/strong&gt; Experimental, indie, or amateur projects are rare. Novel services serving a small niche community are rare. Services designed by people who aren’t well-represented in the tech industry are rare. Community-driven open source projects &lt;a href=&quot;https://sandstorm.io/news/2014-07-21-open-source-web-apps-require-federated-hosting&quot;&gt;basically aren’t viable&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The only way to solve these problems is by decentralizing the software (not just the storage). Software must be provided as a package – not as a service – with each user running their own private copy. It doesn’t really matter if the user chooses to deploy to “the cloud” or to their own machine, as long as they can run any package they want. It is, however, important that the means to deploy software be accessible even to non-technical users, so that everyone can participate and developers can reach a wide audience. Deploying an app on your server must therefore be as easy as installing an app on your phone, and must be “secure by default”.&lt;/p&gt;

&lt;p&gt;This is the focus of Sandstorm.&lt;/p&gt;
</description>
				<pubDate>Wed, 17 Aug 2016 00:00:00 -0700</pubDate>
                                <link>https://sandstorm.io/news/2016-08-17-decentralization-is-about-diversity</link>
                                <guid isPermaLink="true">https://sandstorm.io/news/2016-08-17-decentralization-is-about-diversity</guid>
			</item>
		
			<item>
				<title>Share many as one, with the Collections app</title>
				<description>&lt;p&gt;Starting work on a project in Sandstorm often means creating many grains, each pertaining to a
different aspect of your work. In a typical project, you might have a spreadsheet, a chat room, a
kanban board, and several source code repositories. Sandstorm makes it easy to share these grains
with your collaborators, but until recently, you would need to share each grain to each collaborator
separately — a task that could quickly become tedious. What if you want to share the entire
project as a single unit?&lt;/p&gt;

&lt;p&gt;Now that we have released the
&lt;a href=&quot;https://apps.sandstorm.io/app/s3u2xgmqwznz2n3apf30sm3gw1d85y029enw5pymx734cnk5n78h&quot;&gt;Collections app&lt;/a&gt;,
we have a satisfying answer to that question; to share many grains at once, you add them to a collection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/news/images/collections-1.png&quot; title=&quot;a collection with a chatroom, a kanban board, a spreadsheet, and two git repos&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A collection is a list of grains. Any collaborator with whom you share a collection gets access to
all of the grains in it. On the flip side, when you remove a grain from the collection, your
collaborators lose access to that grain. Moreover, when you revoke a collaborator from the
collection, that (now former-) collaborator loses access to all of the collection’s grains.&lt;/p&gt;

&lt;p&gt;And since a collection is itself a grain, sharing one works just like sharing anything else on
Sandstorm, through the “Share access” button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/news/images/collections-2.png&quot; title=&quot;the &amp;quot;Share access&amp;quot; dialog&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;powerbox-makes-it-possible&quot;&gt;Powerbox makes it possible&lt;/h3&gt;

&lt;p&gt;The fact that we have implemented collections &lt;em&gt;as an app&lt;/em&gt; may come as a surprise, since the notion
of a collection might seem fundamental enough to deserve being baked-in as a core feature of
Sandstorm. However, Sandstorm bakes in an even more fundamental notion: the idea that grains can
refer to and coordinate with one another. The embodiment of this idea is the &lt;a href=&quot;/how-it-works#powerbox&quot;&gt;powerbox&lt;/a&gt;,
an interface — mediated and auditable by the user — through which grains can exchange capabilities.&lt;/p&gt;

&lt;p&gt;When you click the “Add grain” button in a collection, the collection in fact initiates a powerbox
request. Sandstorm then asks you, the user, to choose a grain with which to fulfill the request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/news/images/collections-3.png&quot; title=&quot;Making a powerbox request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you select a grain, the collection receives a reference to that grain. It can then use that
reference to retrieve metadata such as the grain’s icon and the the name of the app that created the
grain. Crucially, it can also offer the reference to your collaborators, so that your single “Add
grain” action can result in all of your collaborators receiving access to the grain.
The behind-the-scenes details of how this all works can be found in our
&lt;a href=&quot;https://docs.sandstorm.io/en/latest/developing/powerbox/&quot;&gt;technical documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Other apps can use the powerbox in the same way. You could write an alternative implementation of
collections, either by starting from scratch or by forking
&lt;a href=&quot;https://github.com/sandstorm-io/collections-app&quot;&gt;ours&lt;/a&gt;. Apps whose primary purpose has nothing
to do with collections can also benefit from the ability to request and offer grain references. For
example, a chat room could be enhanced by the ability to embed Sandstorm-aware links to other
grains. Indeed, the latest release of
&lt;a href=&quot;https://apps.sandstorm.io/app/vfnwptfn02ty21w715snyyczw0nqxkv3jvawcah10c6z7hj1hnu0&quot;&gt;Rocket.Chat&lt;/a&gt; does just that.&lt;/p&gt;

&lt;h3 id=&quot;built-with-rust&quot;&gt;Built with Rust&lt;/h3&gt;

&lt;p&gt;Although a fast startup time and a small memory footprint are important performance goals for any
Sandstorm app, they are especially important for the Collections app, as it provides such a central
piece of functionality. Collections need to be lightweight so that their integration with the rest
of Sandstorm can feel seamless. Our primary strategy for achieving such performance has been to
develop the Collections app using the &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust programming language&lt;/a&gt;,
interfacing directly with Sandstorm’s &lt;a href=&quot;https://sandstorm.io/news/2014-12-15-capnproto-0.5&quot;&gt; Cap’n Proto interfaces &lt;/a&gt;.
Rust has worked well so far, and along the way we
have produced some &lt;a href=&quot;https://crates.io/crates/sandstorm&quot;&gt;libraries&lt;/a&gt; and &lt;a href=&quot;https://github.com/dwrensha/sandstorm-rawapi-example-rust&quot;&gt;examples&lt;/a&gt; to help others also get started using it
for Sandstorm app development.&lt;/p&gt;

&lt;p&gt;Whether or not you are a developer, now is an exciting time to
&lt;a href=&quot;https://sandstorm.io/community&quot;&gt;get involved&lt;/a&gt;
with Sandstorm. The powerbox is still in its early stages, and the
Collections app is a hint at the kinds of things it will enable.
So &lt;a href=&quot;https://apps.sandstorm.io/app/s3u2xgmqwznz2n3apf30sm3gw1d85y029enw5pymx734cnk5n78h&quot;&gt;try it out and let us know what you think&lt;/a&gt;!&lt;/p&gt;
</description>
				<pubDate>Tue, 09 Aug 2016 00:00:00 -0700</pubDate>
                                <link>https://sandstorm.io/news/2016-08-09-collections-app</link>
                                <guid isPermaLink="true">https://sandstorm.io/news/2016-08-09-collections-app</guid>
			</item>
		
			<item>
				<title>July changelog - what&#39;s new in Sandstorm</title>
				<description>&lt;p&gt;In July, we introduced a new Sandstorm feature: Apps can notify users when something interesting
happens within a grain. For example, Etherpad uses this to tell you when someone leaves a comment on
a document. This ActivityEvent API was designed by Kenton Varda and its visual elements were
designed by Néna Nguyễn. You can read more in its &lt;a href=&quot;https://github.com/sandstorm-io/sandstorm/blob/master/src/sandstorm/activity.capnp&quot;&gt;Cap’n Proto
definition&lt;/a&gt;; any
app within Sandstorm can use it. The easiest way to try it out is to make a new Etherpad document,
then open it in an incognito window, and use the incognito window to leave yourself a comment.&lt;/p&gt;

&lt;p&gt;This change, and many more, went live during July. To keep your Sandstorm server updated, you can
sit back and relax. In the default configuration, Sandstorm’s automatic updates will install updates
within 24 hours of a new release.&lt;/p&gt;

&lt;p&gt;Here’s the full July changelog!&lt;/p&gt;

&lt;h3 id=&quot;v0173-2016-07-23&quot;&gt;v0.173 (2016-07-23)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Sandstorm for Work: Added server whitelabeling features. Find under “Personalization” in the admin panel.&lt;/li&gt;
  &lt;li&gt;Apps now receive profile pictures for all users. Users who have no picture get an identicon. Previously, apps were expected to generate identicons themselves.&lt;/li&gt;
  &lt;li&gt;HTTP requests to / responses from apps now pass through any header prefixed with &lt;code&gt;X-Sandstorm-App-&lt;/code&gt;. Also, &lt;code&gt;X-OC-Mtime&lt;/code&gt; is whitelisted in responses, to improve Davros’ compatibility with ownCloud clients.&lt;/li&gt;
  &lt;li&gt;Attempting to download a backup of a collection will show a warning explaining that this doesn’t do what you expect.&lt;/li&gt;
  &lt;li&gt;Prevented guests from uploading grain backups. These uploads weren’t creating actual grains, but could use up server-side disk space.&lt;/li&gt;
  &lt;li&gt;Fix bug in grainlist deduplification on app details page.&lt;/li&gt;
  &lt;li&gt;Fixed that the admin page for managing a specific user only showed their login identities, not non-login identities. The main list showed both, but the non-login identities would disappear when clicking through to a specific user.&lt;/li&gt;
  &lt;li&gt;The favicon is now transparent instead of white-background.&lt;/li&gt;
  &lt;li&gt;The guided tour highlight of the “share access” button no longer blacks out the button on Firefox.&lt;/li&gt;
  &lt;li&gt;The admin UI’s “Personalization” page no longer fails to save if you haven’t entered a Terms of Service or Privacy Policy URL.&lt;/li&gt;
  &lt;li&gt;“204 No Content” responses from apps now preserve the ETag.&lt;/li&gt;
  &lt;li&gt;Refactored powerbox client-side code to make it more pluggable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;v0172-2016-07-15-bugfixes&quot;&gt;v0.172 (2016-07-15) [bugfixes]&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Fixed a regression that caused accepting an app update notification to have no effect. Sandstorm will re-notify about missed updates within 24 hours.&lt;/li&gt;
  &lt;li&gt;Fixed bugs preventing Sandstorm from working on IE10.&lt;/li&gt;
  &lt;li&gt;Tweaked new activity event API.&lt;/li&gt;
  &lt;li&gt;Major refactor of powerbox-related code.&lt;/li&gt;
  &lt;li&gt;Bugfixes related to upcoming collections app.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;v0171-2016-07-09&quot;&gt;v0.171 (2016-07-09)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Activity/Notifications API:&lt;/strong&gt; Apps can now inform Sandstorm when a grain has been modified. Sandstorm will then highlight the grain in the user interface to show that it has new content, and in some cases deliver notifications to interested users. Apps need to be updated to use the API, but an update to Etherpad will ship on Sunday with updates to Rocket.Chat and Wekan soon thereafter.&lt;/li&gt;
  &lt;li&gt;Fixed regression where grain UIs would not refresh when the grain’s package was updated.&lt;/li&gt;
  &lt;li&gt;Fixed bug where it was possible to have a “shared with me” copy of a grain you own show up in your grain list, which in turn caused other bugs.&lt;/li&gt;
  &lt;li&gt;Fixed spurious deprecation warning in server logs and reduced the size of the Sandstorm bundle by 10% by eliminating redundant copies of the Connect framework which were being included due to npm dependency semantics.&lt;/li&gt;
  &lt;li&gt;Fixed some modal dialogs stretching off the screen on mobile.&lt;/li&gt;
  &lt;li&gt;Various code refactoring.&lt;/li&gt;
  &lt;li&gt;Oasis: Fixed that save()ing a capability was producing a SturdyRef that could not be restored due to bookkeeping errors.&lt;/li&gt;
  &lt;li&gt;Sandstorm for Work: The SAML XML blob is now available even if the SAML identity provider has not yet been enabled. This should make setup easier.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;v0170-2016-07-02-bugfixes&quot;&gt;v0.170 (2016-07-02) [bugfixes]&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Meteor-based apps will no longer go into redirect loops when WebSockets are not working.&lt;/li&gt;
  &lt;li&gt;Sandstorm for Work: Fixed SAML login failing when a user’s name contained non-ASCII characters.&lt;/li&gt;
  &lt;li&gt;The Powerbox API has changed slightly to involve a server-side exchange after the client-side selection operation. This improve security. Existing powerbox-using apps will need to be updated – but no major apps are using it yet.&lt;/li&gt;
  &lt;li&gt;When using email login and clicking the link (rather than copy/pasting the token), you will now be redirected back to the URL from which you initiated login.&lt;/li&gt;
  &lt;li&gt;Improved design of profile editor UI.&lt;/li&gt;
  &lt;li&gt;The user table in the admin panel can now be sorted by clicking column headers.&lt;/li&gt;
  &lt;li&gt;Fixed “guided tour” hint bubble for installing apps showing for users who aren’t allowed to install apps.&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Wed, 03 Aug 2016 00:00:00 -0700</pubDate>
                                <link>https://sandstorm.io/news/2016-08-03-whats-new</link>
                                <guid isPermaLink="true">https://sandstorm.io/news/2016-08-03-whats-new</guid>
			</item>
		
			<item>
				<title>June changelog - what&#39;s new in Sandstorm</title>
				<description>&lt;p&gt;June’s big change is that we’ve reworked what first-time users see when using Sandstorm. There are
speech bubbles guiding them to install an app, create a grain, and to take a look at the “Share
access” interface, all powered by &lt;a href=&quot;http://introjs.com/&quot;&gt;intro.js&lt;/a&gt;. I’m hopeful this helps people
become productive and comfortable with Sandstorm faster than before.&lt;/p&gt;

&lt;p&gt;It applies to all users, including demo users, so test it out by opening
&lt;a href=&quot;https://demo.sandstorm.io/&quot;&gt;demo.sandstorm.io&lt;/a&gt; in an incognito window and click Try a quick demo.&lt;/p&gt;

&lt;p&gt;Some readers will appreciate that this month, we also chased down a subtle memory leak caused by a
lack of flow control in the HTTP implementation spread across proxy.js and
sandstorm-http-bridge. You’ll find the details in &lt;a href=&quot;https://github.com/sandstorm-io/sandstorm/pull/2056/files&quot;&gt;pull request
#2056.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Read the full changelog here, or visit your own Sandstorm server’s “About Sandstorm” section for a
changelog at any time.&lt;/p&gt;

&lt;h3 id=&quot;v0169-2016-06-26-bugfixes&quot;&gt;v0.169 (2016-06-26) [bugfixes]&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Fixed regression in static web publishing that caused requests that should have returned 404s or redirect-to-add-trailing-slash to instead return a 500 status with a blank page.&lt;/li&gt;
  &lt;li&gt;Added ability for admin to request a heapdump (to debug memory leaks).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;v0168-2016-06-24-bugfixes&quot;&gt;v0.168 (2016-06-24) [bugfixes]&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Sandstorm for Work: SAML connector should now work with Active Directory.&lt;/li&gt;
  &lt;li&gt;Fixed various subtle resource leaks in Sandstorm front-end and sandstorm-http-bridge.&lt;/li&gt;
  &lt;li&gt;Fixed random crash/hang bug introduced in sandstorm-http-bridge v0.166. Apps build since that time will need to be rebuilt.&lt;/li&gt;
  &lt;li&gt;The old admin interface has been completely removed (the new admin interface has been the default since v0.164).&lt;/li&gt;
  &lt;li&gt;The email configuration test dialog now shows more informative error messages.&lt;/li&gt;
  &lt;li&gt;The “most-used” apps row is now only shown if you have more than 6 apps, without which it isn’t helping.&lt;/li&gt;
  &lt;li&gt;Added “guided tour” hint highlighting the “share access” button.&lt;/li&gt;
  &lt;li&gt;Added explanatory text to admin user invite page.&lt;/li&gt;
  &lt;li&gt;Fixed search bar autofocus on app list page.&lt;/li&gt;
  &lt;li&gt;The question mark info button on Grains page was supposed to have a circle around it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;v0167-2016-06-18-bugfixes&quot;&gt;v0.167 (2016-06-18) [bugfixes]&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Updated to Meteor 1.3.3.1.&lt;/li&gt;
  &lt;li&gt;Implemented hard flow control at the Cap’n Proto layer so that an errant (or malicious) app cannot cause excessive memory use elsewhere in the system by making excessive simultaneous calls. This should improve the stability of Oasis.&lt;/li&gt;
  &lt;li&gt;Implemented flow control for uploads to an app (though it rarely comes into play unless running Sandstorm locally).&lt;/li&gt;
  &lt;li&gt;Fixed that after losing internet connectivity for a while (or suspending your laptop) and then coming back, grains would refresh.&lt;/li&gt;
  &lt;li&gt;Fixed some memory leaks in shell server.&lt;/li&gt;
  &lt;li&gt;Added more “guided tour” points to help new users learn Sandstorm.&lt;/li&gt;
  &lt;li&gt;Sandstorm for Work: SAML connector now exports XML auto-configuration blob.&lt;/li&gt;
  &lt;li&gt;Sandstorm for Work: Improved UI around feature keys.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;v0166-2016-06-11-bugfixes&quot;&gt;v0.166 (2016-06-11) [bugfixes]&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Implemented flow control for large file downloads from apps so that they don’t buffer in the front-end consuming excessive RAM. Apps that handle large files will need to re-pack using the latest sandstorm-http-bridge and push an update.&lt;/li&gt;
  &lt;li&gt;Sandstorm for Work: Made SAML entity ID configurable; added more setup instructions.&lt;/li&gt;
  &lt;li&gt;Updated Google login setup instructions to match latest gratuitous UI changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;v0165-2016-06-04-bugfixes&quot;&gt;v0.165 (2016-06-04) [bugfixes]&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Re-enabled websocket self-check under new admin UI.&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Wed, 13 Jul 2016 00:00:00 -0700</pubDate>
                                <link>https://sandstorm.io/news/2016-07-13-whats-new</link>
                                <guid isPermaLink="true">https://sandstorm.io/news/2016-07-13-whats-new</guid>
			</item>
		
			<item>
				<title>Upcoming Event: Web app packaging in Sandstorm: It&#39;s not LAMP</title>
				<description>&lt;p&gt;On July 19th, Sandstorm core dev &lt;a href=&quot;https://github.com/paulproteus&quot;&gt;Asheesh Larioa&lt;/a&gt; will be giving a talk about web packaging at our South Bay Sandstorm meetup.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/news/images/asheesh-profile.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Talk details&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This talk covers how web app packaging works for Sandstorm.io. Asheesh will compare and contrast Sandstorm packaging against the typical install process on a Linux/Apache/MySQL/PHP system. This talk was featured at &lt;a href=&quot;https://debconf16.debconf.org/talks/84/&quot;&gt;Debconf16&lt;/a&gt;, the yearly Debian conference.&lt;/p&gt;

&lt;p&gt;He will outline how Sandstorm’s packaging tools do a few strange things to allow unprivileged users to install apps with one click:&lt;/p&gt;

&lt;p&gt;• Every app package is a tiny Debian derivative, often as small as 20MB.&lt;/p&gt;

&lt;p&gt;• Apps have no Internet connectivity to the outside world.&lt;/p&gt;

&lt;p&gt;• Sandstorm uses a FUSE filesystem to identify which files are needed to run the app.&lt;/p&gt;

&lt;p&gt;• An app bundles all its needed services, as well as files, resulting in one MySQL service per app.&lt;/p&gt;

&lt;p&gt;• Users click and run one instance of an app like Etherpad per document, which is all handled transparently via a web app, a strategy that has neutralized 95% of 0-day web app vulnerabilities, based on our analysis.&lt;/p&gt;

&lt;p&gt;• Developers on Mac OS and Windows can create packages for Sandstorm, even though Sandstorm is Linux-only, due to an emphasis on Linux VMs in our development tools.&lt;/p&gt;

&lt;p&gt;Somehow we manage to make this scale reasonably well. Additionally, it is popular with upstream authors: of the &amp;gt;58 web apps packaged for Sandstorm, about 1/3 are maintained by their upstreams.&lt;/p&gt;

&lt;p&gt;This talk focuses on how the Sandstorm packaging tools work, with community insights as well as technical ones, with the hopes of showing Debian how to more effectively package web apps for end users.&lt;/p&gt;

&lt;p&gt;Come for the opportunity to meet others in the Sandstorm community, and work on your project with guidance from our core devs. This event will be held at RethinkDB in Mountain View on July 19. RSVP &lt;a href=&quot;http://www.meetup.com/Sandstorm-SF-Bay-Area/events/231954146/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Wed, 29 Jun 2016 00:00:00 -0700</pubDate>
                                <link>https://sandstorm.io/news/2016-06-29-asheesh-web-apps</link>
                                <guid isPermaLink="true">https://sandstorm.io/news/2016-06-29-asheesh-web-apps</guid>
			</item>
		
	</channel>
</rss>
